#!/bin/sh



#count existing backup files
function count_backups() {
    
    if [ -d /backups/ ]; then
        echo $(ls -b /backups/ | wc -l)
    else
        echo 0
    fi
}


#remove old backup files
function remove_old_backups() {
 
    BACKUP_COUNT=$(count_backups)
    MAX_BACKUPS=$1

    if [ "$BACKUP_COUNT" -gt "$MAX_BACKUPS" ]; then
        
        OLDEST="$(ls -tr /backups/ | head -n 1)"
        echo "removing old backup file:"
        
        if [ -f /backups/$OLDEST ]; then  
            rm -rfv /backups/$OLDEST 
        fi
        
        remove_old_backups $MAX_BACKUPS

    fi

}




# backup file name
FILE="owncloud_`date +'%Y%m%d_%H%M'`".tar.gz

#default arguments
BACKUP=false
RESTORE=false
LIST=false
USAGE=true

#parse arguments
while [[ $# > 0 ]]
do
    key="$1"
    case $key in

            -b|--backup)
            USAGE=false
            BACKUP=true
            shift
            ;;
             -r|--restore)
            RESTORE="$2"
            USAGE=false
            shift
            ;;
            -l|--list)
            LIST=true
            USAGE=false
            shift
            ;;
            -h|--help)
            USAGE=true
            ;;
            *)
            ;;
    esac
    shift
done


if [ "$USAGE" = true ]; then
    
    echo "Usage:"
    echo "backup -b";
    echo "tar owncloud-web and postgresql into backupdir /backups. The backup is called  ${FILE}.";
    echo "";
    echo "backup -r backup.tar.gz";
    echo "restore the file backup.tar.gz. It has to be located in /backups";
    exit 1;

fi

if [ "$BACKUP" != false ]; then
    
    mkdir -p /backups
    
    echo "compressing owncloud data, config and app files to $FILE ...";
    tar -cpf /backups/$FILE /var/www/localhost/htdocs

    if [ "$DB_EXTERNAL" = false ]; then
        echo "appending postgres database to $FILE"
        tar -upf /backups/$FILE /var/lib/postgresql/data/
    fi

    remove_old_backups $OC_BACKUP_FILES
    echo "done";

fi



if [ "$RESTORE" != false ]; then
    
    echo "Restoring $RESTORE ...";
    [ ! -f /backups/$RESTORE ] && echo "fatal: file /backups/$RESTORE not found." && exit 0;
    tar -xpf /backups/$RESTORE -C /
    echo "done";

fi

if [ "$LIST" != false ]; then

    BACKUP_COUNT=$(count_backups)
    if [ "$BACKUP_COUNT" -gt 0 ]; then
        echo "$BACKUP_COUNT available backup files:";
        ls -gGth /backups/|cut -d " " -f 3-
        echo "Total: $(du -h /backups/|awk '{print $1}')"
    else
        echo "No backup files found";
    fi

fi
