#!/bin/bash


##function definitions
function start_psql {
    echo '### starting database server ###'
    su - postgres -c "pg_ctl start -D /var/lib/postgres/data -l /var/log/postgres/log"
}


if [ "$DB_EXTERNAL" = false ]; then

    if [ ! -d /var/lib/postgres/data/base ]; then

        echo '### no local postgres database found ###'
        echo '### installing database ###'

        chown postgres:postgres /var/lib/postgres/data
        chmod u=rwx,g-rwx,o-rwx /var/lib/postgres/data
        su - postgres -c "initdb --locale en_US.UTF-8 -E UTF8 -D '/var/lib/postgres/data'"
        start_psql
        sleep 2 #wait for postgres till started
        echo '### create Owncloud Database and -user ###'
        su - postgres -c "psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';\""  
        su - postgres -c "psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;;\""
    else
        echo '### existing postgres database found ###'
        start_psql
    fi 

fi


   
if [ ! -e /srv/http/index.php ]; then
    
    echo '### no owncloud webfiles found ###'  
    echo '### downloading owncloud webinstaller ###'
    curl https://download.owncloud.com/download/community/setup-owncloud.php > /srv/http/setup-owncloud.php
   
    echo '### running owncloud webinstaller ###'
    echo '...this may take a while...'
    echo ""| php -R 'include("/srv/http/setup-owncloud.php");' -B 'parse_str($argv[1], $_GET);' 'step=2&directory=.'
fi

if [ ! -e /srv/http/data/config/config.php ]; then
    
    echo '### no owncloud config-files found ###'
    mkdir -p data
    mv -f config data/
    mv -f apps data/
    ln -s data/config config
    ln -s data/apps apps

    echo '### writing config-files ###'
    #enable memcache
    #notice: here-documents only support real tabs
	cat <<-EOF >/srv/http/data/config/config.php
		<?php
		\$CONFIG = array (
			'memcache.local' => '\\OC\\Memcache\\APCu',
		);
	EOF

    #write autoconfig
    #notice: here-documents only support real tabs
	cat <<-EOF >/srv/http/data/config/autoconfig.php
		<?php
		\$AUTOCONFIG = array (
		"dbtype"        => "$DB_TYPE",
		"dbname"        => "$DB_NAME",
		"dbuser"        => "$DB_USER",
		"dbpass"        => "$DB_PASS",
		"dbhost"        => "$DB_HOST",
		"dbtableprefix" => "$DB_PREFIX",
		"adminlogin"    => "$OC_ADMIN",
		"adminpass"     => "$OC_ADMINPASS",
		"directory"     => "$OC_DATADIR",
		);
	EOF

else
   
   echo '### existing config-files found, migrating... ###' 
   rm -rf /srv/http/config
   rm -rf /srv/http/apps
   ln -s data/config config
   ln -s data/apps apps

fi

    echo "### set timezone to $OC_TIME ###"
    ln -sf /usr/share/zoneinfo/$OC_TIME /etc/localtime
    
    echo "### set locale to $LC_OC"
    echo -e "LANG=$OC_LC\nLC_MESSAGES=$OC_LC\nLC_MONETARY=$OC_LC\nLC_NUMERIC=$OC_LC\nLC_TIME=$OC_LC" > /etc/locale.conf
    locale-gen

    echo '### fixing directory premissions ###'    
    #from https://doc.owncloud.org/server/8.0/admin_manual/installation/installation_wizard.html
    ocpath='/srv/http'
    htuser='http'
    htgroup='http'

    find ${ocpath}/ -type f -print0 | xargs -0 chmod 0640
    find ${ocpath}/ -type d -print0 | xargs -0 chmod 0750
    
    chown -R root:${htuser} ${ocpath}/
    chown -R ${htuser}:${htgroup} ${ocpath}/apps/
    chown -R ${htuser}:${htgroup} ${ocpath}/config/
    chown -R ${htuser}:${htgroup} ${OC_DATADIR}
    chown -R ${htuser}:${htgroup} ${ocpath}/themes/
   
    chown -R root:root /ssl/
    chmod 600 /ssl
    chmod -R 700  /ssl/
   
    chmod +x /srv/http/occ

    echo '### configuring apache ###'
    sed -i 's/ServerAdmin.*$/ServerAdmin '"$OC_EMAIL"'/g' /etc/httpd/conf/httpd.conf 
    sed -i 's/^#ServerName.*$/ServerName '"$OC_DOMAIN"'/g' /etc/httpd/conf/httpd.conf
    sed -i '/Listen 80/a Listen 443' /etc/httpd/conf/httpd.conf
    
    # load extra apache modules
    sed -i '/proxy_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/proxy_connect_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/proxy_ftp_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/proxy_http_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/proxy_wstunnel_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/proxy_ajp_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/proxy_balancer_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/ssl_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/cgi_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/socache_shmcb_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/mpm_prefork_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/mpm_event_module/s/^/#/g' /etc/httpd/conf/httpd.conf
    sed -i '/rewrite_module/s/^#//g' /etc/httpd/conf/httpd.conf
    sed -i '/rewrite_module/a LoadModule php7_module modules\/libphp7\.so' /etc/httpd/conf/httpd.conf

    # include php config
    sed -i '/httpd-mpm/a Include conf\/extra/php7_module\.conf' /etc/httpd/conf/httpd.conf
  
    # include vhost config
    sed -i '/httpd-vhosts/s/^#//g' /etc/httpd/conf/httpd.conf

    # configure php.ini
    sed -i 's/^;open_basedir.*$/open_basedir=\/srv\/http\/:\/tmp\/:\/dev\/urandom/' /etc/php/php.ini
    sed -i '/extension=bz2/s/^;//g' /etc/php/php.ini
    sed -i '/extension=bz2/a extension=apcu\.so' /etc/php/php.ini
    sed -i '/extension=apcu/a extension=apc\.so' /etc/php/php.ini
    sed -i '/extension=apc\.so/a apc\.enabled=1' /etc/php/php.ini
    sed -i '/apc\.enabled=1/a apc\.shm_size=64M' /etc/php/php.ini
    sed -i '/apc\.shm_size=64M/a apc\.ttl=7200' /etc/php/php.ini
    sed -i '/apc\.ttl=7200/a apc\.enable_cli=1' /etc/php/php.ini
    sed -i '/extension=gd/s/^;//g' /etc/php/php.ini
    sed -i '/extension=gettext/s/^;//g' /etc/php/php.ini
    sed -i '/extension=iconv/s/^;//g' /etc/php/php.ini
    sed -i '/extension=intl/s/^;//g' /etc/php/php.ini
    sed -i '/extension=mcrypt/s/^;//g' /etc/php/php.ini
    sed -i '/extension=pdo_pgsql/s/^;//g' /etc/php/php.ini
    sed -i '/extension=pgsql/s/^;//g' /etc/php/php.ini
    sed -i '/extension=xmlrpc/s/^;//g' /etc/php/php.ini


    if [ "$OC_BACKUP_CRON" != "no" ]; then
       echo "### set up backup cron ###"
       fcron -b -p /var/log/cron.log
       echo "OC_BACKUP_FILES=$OC_BACKUP_FILES
       $OC_BACKUP_CRON /usr/local/bin/backup -b 2>&1 | tee /var/log/backup.log"| fcrontab - 
    fi
 
    rm -f /srv/http/setup-owncloud.php

    echo '### Gratulations! Point your browser to your new owncloud instance. ###'

exec $@
