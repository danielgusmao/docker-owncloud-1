#!/bin/sh

# exit if a command fails
set -e 
set -o pipefail

##function definitions
start_psql() {
    echo '### starting database server ###'
    su - postgres -c "pg_ctl start -D /var/lib/postgresql/data -l /var/log/postgresql/log"
}


if [ "$DB_EXTERNAL" = false ]; then

    if [ ! -d /var/lib/postgres/data/base ]; then

        echo '### no local postgres database found ###'
        echo '### installing database ###'

        chown postgres:postgres /var/lib/postgresql/data
        chmod u=rwx,g-rwx,o-rwx /var/lib/postgresql/data
        su - postgres -c "initdb --locale en_US.UTF-8 -E UTF8 -D '/var/lib/postgresql/data'"
        start_psql
        sleep 2 #wait for postgres till started
        echo '### create Owncloud Database and -user ###'
        su - postgres -c "psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';\""  
        su - postgres -c "psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;;\""
    else
        echo '### existing postgres database found ###'
        start_psql
    fi 

fi


   
if [ ! -e "$OC_WWW/index.php" ]; then
    
    echo '### no owncloud webfiles found ###'
    mkdir -p "$OC_WWW/data" "$OC_WWW/apps2" 
    echo '### downloading owncloud webinstaller ###'
    wget https://download.owncloud.com/download/community/setup-owncloud.php -O "$OC_WWW/setup-owncloud.php"
   
    echo '### running owncloud webinstaller ###'
    echo '...this may take a while...'
    echo ""| php -R 'include("'$OC_WWW'/setup-owncloud.php");' -B 'parse_str($argv[1], $_GET);' 'step=2&directory=.'
    rm -f "$OC_WWW"/setup-owncloud.php
fi

if [ ! -e "$OC_WWW/config/config.php" ]; then
    
    echo '### writing config-files ###'
    #enable memcache and set additional apps dir
    #notice: here-documents only support real tabs
	cat <<-EOF >"$OC_WWW/config/config.php"
		<?php
		\$CONFIG = array (
			'memcache.local' => '\\OC\\Memcache\\APCu',
			'apps_paths' => array (
				0 => array (
					"path"     => "$OC_WWW/apps",
					"url"      => "/apps",
					"writable" => false,
				),
				1 => array (
					"path"     => "$OC_WWW/apps2",
					"url"      => "/apps2",
					"writable" => true,
				)
			)
		);
	EOF

    #write autoconfig
    #notice: here-documents only support real tabs
	cat <<-EOF >"$OC_WWW/config/autoconfig.php"
		<?php
		\$AUTOCONFIG = array (
		"dbtype"        => "$DB_TYPE",
		"dbname"        => "$DB_NAME",
		"dbuser"        => "$DB_USER",
		"dbpass"        => "$DB_PASS",
		"dbhost"        => "$DB_HOST",
		"dbtableprefix" => "$DB_PREFIX",
		"adminlogin"    => "$OC_ADMIN",
		"adminpass"     => "$OC_ADMINPASS",
		"directory"     => "$OC_DATADIR",
		);
	EOF
fi


if [ ! -e /srv/installed ]; then
    echo "### set timezone to $OC_TIME ###"
    ln -sf /usr/share/zoneinfo/$OC_TIME /etc/localtime
   
    # not supported in alpine 
    #echo "### set locale to $LC_OC"
    #echo -e "LANG=$OC_LC\nLC_MESSAGES=$OC_LC\nLC_MONETARY=$OC_LC\nLC_NUMERIC=$OC_LC\nLC_TIME=$OC_LC" > /etc/locale.conf
    #locale-gen

    echo '### fixing directory premissions ###'    
    #from https://wiki.archlinux.org/index.php/OwnCloud
    /usr/local/bin/oc-perms

    echo '### configuring apache ###'
    sed -i 's/ServerAdmin.*$/ServerAdmin '"$OC_EMAIL"'/g' /etc/apache2/httpd.conf 
    sed -i 's/^#ServerName.*$/ServerName '"$OC_DOMAIN"'/g' /etc/apache2/httpd.conf
    sed -i 's/ServerAdmin.*$/ServerAdmin '"$OC_EMAIL"'/g' /etc/apache2/conf.d/httpd-vhosts.conf 
    sed -i 's/ServerName.*$/ServerName '"$OC_DOMAIN"'/g' /etc/apache2/conf.d/httpd-vhosts.conf
    sed -i 's/Redirect permanent.*$/Redirect permanent \/ https:\/\/'"$OC_DOMAIN"'\//g' /etc/apache2/conf.d/httpd-vhosts.conf
    sed -i '/Listen 80/a Listen 443' /etc/apache2/httpd.conf
    
    # load extra apache modules
    sed -i '/proxy_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/proxy_connect_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/proxy_ftp_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/proxy_http_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/proxy_wstunnel_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/proxy_ajp_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/proxy_balancer_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/ssl_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/cgi_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/mpm_prefork_module/s/^#//g' /etc/apache2/httpd.conf
    sed -i '/mpm_event_module/s/^/#/g' /etc/apache2/httpd.conf
    sed -i '/rewrite_module/s/^#//g' /etc/apache2/httpd.conf

    # configure php.ini
    sed -i 's/^;open_basedir.*$/open_basedir=\/srv\/http\/:\/tmp\/:\/dev\/urandom/' /etc/php5/php.ini
    sed -i '/extension=bz2/s/^;//g' /etc/php5/php.ini
    sed -i '/extension=bz2/a extension=apcu\.so' /etc/php5/php.ini
    sed -i '/extension=apcu/a extension=apc\.so' /etc/php5/php.ini
    sed -i '/extension=apc\.so/a apc\.enabled=1' /etc/php5/php.ini
    sed -i '/apc\.enabled=1/a apc\.shm_size=64M' /etc/php5/php.ini
    sed -i '/apc\.shm_size=64M/a apc\.ttl=7200' /etc/php5/php.ini
    sed -i '/apc\.ttl=7200/a apc\.enable_cli=1' /etc/php5/php.ini
    sed -i '/extension=gettext/s/^;//g' /etc/php5/php.ini
    sed -i '/extension=iconv/s/^;//g' /etc/php5/php.ini
    sed -i '/extension=xmlrpc/s/^;//g' /etc/php5/php.ini


    if [ "$OC_BACKUP_CRON" != "no" ]; then
       echo "### set up backup cron ###"
       echo "OC_BACKUP_FILES=$OC_BACKUP_FILES
       $OC_BACKUP_CRON /usr/local/bin/backup -b 2>&1 | tee /var/log/backup.log" > /var/spool/cron/crontabs/root
       crond -b -L /var/log/cron.log
    fi
 

    echo '### Gratulations! Point your browser to your new owncloud instance. ###'
    touch /srv/installed
fi

exec $@
